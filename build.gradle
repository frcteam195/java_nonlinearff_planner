buildscript {
    repositories {
        gradlePluginPortal()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.7.0'
    }
}

plugins {
    id 'java'
    id 'war'
    id 'idea'
}

apply plugin: 'com.bmuschko.tomcat'

group 'com.team195'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'gov.nist.math:jama:1.0.3'
    testImplementation 'junit:junit:4.12'
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    def tomcatVersion = '9.0.30'
    def tomcatLoggingVersion = '9.0.0.M6'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatLoggingVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

    implementation("org.springframework:spring-webmvc:5.2.3.RELEASE")
    implementation("javax.servlet:javax.servlet-api:4.0.1")
    implementation("javax.servlet:jstl:1.2")

    implementation('com.google.protobuf:protobuf-java:3.18.0')
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/protogen'
        }
    }
}

//For this task to run successfully, you must have the following in your system path:
//protoc
task protoc {
    doFirst {
        exec {
            workingDir "$projectDir/src/main/proto"
            project.logger.lifecycle('Generating Java Code from .proto files')
            commandLine 'bash', '-c', 'rm -Rf ../protogen; mkdir -p ../protogen; protoc --java_out=../protogen/ *.proto'
        }
    }
}

//sourceSets {
//    main {
//        java {
//            srcDirs 'protogen'
//        }
//    }
//}

build.dependsOn protoc
build.mustRunAfter protoc

// context where tomcat is deployed, by default localhost:8080/
tomcatRun.contextPath = '/'
tomcatRunWar.contextPath = '/'

tomcat {
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol  = 'org.apache.coyote.ajp.AjpNio2Protocol'
}

war {
    //entryCompression = ZipEntryCompression.STORED
    //noinspection GroovyAccessibility
    //noinspection GroovyAssignabilityCheck
    webAppDirectory = file('src/main/webapp')
}

test {
    //useJUnitPlatform()
    useJUnit()

    maxHeapSize = '1G'
}